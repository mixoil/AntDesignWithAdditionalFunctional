@page "/counter"
@using System.Web;
@using System.Text.Json;
@inject HttpClient Http

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@*<Select DataSource="@_items"
		@bind-Value="@_selectedValue"
		EnableSearch
        Style="width: 200px;"
		ValueName="@nameof(Item.Value)"
		LabelName="@nameof(Item.Label)"
		TItemValue="string"
		TItem="Item"
        Placeholder="enter and lag test"
        ShowArrowIcon="false"
        OnSearch="@(async (value) => await OnSearch(value))"
		OnSelectedItemChanged="OnSelectedItemChangedHandler"
        SearchDebounceMilliseconds="500"
        IsVirtualized
        AllowClear
        EnableValueSettingByEnterBtn>
</Select>
<Select Mode="multiple"
        DataSource="@_items"
		@bind-Values="@_selectedValues"
		EnableSearch
        Style="width: 200px;"
		ValueName="@nameof(Item.Value)"
		LabelName="@nameof(Item.Label)"
		TItemValue="string"
		TItem="Item"
        Placeholder="multiple lag test"
        ShowArrowIcon="false"
        OnSearch="@(async (value) => await OnSearch(value))"
		OnSelectedItemsChanged="OnSelectedItemsChangedHandler"
        SearchDebounceMilliseconds="500"
        MultipleInputWidth="100"
        IsVirtualized
        AllowClear
        EnableValueSettingByEnterBtn>
</Select>*@
<Select DataSource="@_items"
		@bind-Value="@_selectedValue1"
		EnableSearch
        Style="width: 200px;"
		ValueName="@nameof(Item.Value)"
		LabelName="@nameof(Item.Label)"
		TItemValue="string"
		TItem="Item"
        Placeholder="virtualization provider test"
        ShowArrowIcon="false"
        OnSearch="@(async (value) => await OnSearch(value))"
		OnSelectedItemChanged="OnSelectedItemChangedHandler"
        SearchDebounceMilliseconds="500"
        IsVirtualized
        AllowClear
        EnableValueSettingByEnterBtn>
</Select>

@code
{
    class Item
    {
        public string Value { get; set; }
        public string Label { get; set; }
    }

    Task<List<Item>> _oldTask;
    List<Item> _items = new List<Item>();
    List<Item> _SourceItems = new List<Item>();
    string _selectedValue;
    string _selectedValue1;
    IEnumerable<string> _selectedValues = new List<string>();

    protected override Task OnInitializedAsync()
    {
        for (var i = 0; i < 100000; i++)
            _SourceItems.Add(new Item { Label = $"Item {i}", Value = i.ToString() });
        return base.OnInitializedAsync();
    }

    private async Task OnSearch(string value)
    {
        if (!string.IsNullOrWhiteSpace(value))
        {
            if (_oldTask == null || _oldTask.IsCompleted)
            {
                _oldTask = Task.Run<List<Item>>(() => _SourceItems.Where(i => i.Label.ToLower().Contains(value.Trim().ToLower())).ToList());
                _items = await _oldTask;
                StateHasChanged();
            }
        }
		else
		{
			if (_items.Any())
				_items.Clear();
		}
    }

    private void OnSelectedItemChangedHandler(Item value)
    {
        Console.WriteLine($"selected: ${value?.Label}");
    }

    private void OnSelectedItemsChangedHandler(IEnumerable<Item> values)
    {
        foreach(var value in values)
            Console.WriteLine($"selected: ${value?.Label}");
    }

    public class ApiResult
    {
        public List<string[]> result { get; set; }
    }

    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }
}
